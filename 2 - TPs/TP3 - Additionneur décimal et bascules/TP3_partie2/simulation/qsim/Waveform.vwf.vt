// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2023 17:27:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Bascule
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bascule_vlg_sample_tst(
	D,
	EL,
	sampler_tx
);
input  D;
input  EL;
output sampler_tx;

reg sample;
time current_time;
always @(D or EL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Bascule_vlg_check_tst (
	Q0,
	Qff,
	QL,
	sampler_rx
);
input  Q0;
input  Qff;
input  QL;
input sampler_rx;

reg  Q0_expected;
reg  Qff_expected;
reg  QL_expected;

reg  Q0_prev;
reg  Qff_prev;
reg  QL_prev;

reg  Q0_expected_prev;
reg  Qff_expected_prev;
reg  QL_expected_prev;

reg  last_Q0_exp;
reg  last_Qff_exp;
reg  last_QL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q0_prev = Q0;
	Qff_prev = Qff;
	QL_prev = QL;
end

// update expected /o prevs

always @(trigger)
begin
	Q0_expected_prev = Q0_expected;
	Qff_expected_prev = Qff_expected;
	QL_expected_prev = QL_expected;
end



// expected QL
initial
begin
	QL_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Qff
initial
begin
	Qff_expected = 1'bX;
end 
// generate trigger
always @(Q0_expected or Q0 or Qff_expected or Qff or QL_expected or QL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q0 = %b | expected Qff = %b | expected QL = %b | ",Q0_expected_prev,Qff_expected_prev,QL_expected_prev);
	$display("| real Q0 = %b | real Qff = %b | real QL = %b | ",Q0_prev,Qff_prev,QL_prev);
`endif
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Qff_expected_prev !== 1'bx ) && ( Qff_prev !== Qff_expected_prev )
		&& ((Qff_expected_prev !== last_Qff_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qff :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qff_expected_prev);
		$display ("     Real value = %b", Qff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qff_exp = Qff_expected_prev;
	end
	if (
		( QL_expected_prev !== 1'bx ) && ( QL_prev !== QL_expected_prev )
		&& ((QL_expected_prev !== last_QL_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QL_expected_prev);
		$display ("     Real value = %b", QL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QL_exp = QL_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Bascule_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D;
reg EL;
// wires                                               
wire Q0;
wire Qff;
wire QL;

wire sampler;                             

// assign statements (if any)                          
Bascule i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.EL(EL),
	.Q0(Q0),
	.Qff(Qff),
	.QL(QL)
);

// EL
initial
begin
	EL = 1'b0;
	EL = #310000 1'b1;
	EL = #100000 1'b0;
	EL = #110000 1'b1;
end 

// D
initial
begin
	D = 1'b0;
	D = #220000 1'b1;
	D = #270000 1'b0;
	D = #290000 1'b1;
end 

Bascule_vlg_sample_tst tb_sample (
	.D(D),
	.EL(EL),
	.sampler_tx(sampler)
);

Bascule_vlg_check_tst tb_out(
	.Q0(Q0),
	.Qff(Qff),
	.QL(QL),
	.sampler_rx(sampler)
);
endmodule

